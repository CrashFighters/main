const repairSettings={jsonBeginEnd:[["","}"],["{",""],["{","}"]],projectDependencies:["mime-types"]};module.exports={async execute(e){const s=require(__filename);let r,n=[],a=[];return e.close(),r=await s.repairs.messages.main.fix(),n=n.concat(r?.changed||[]),a=a.concat(r?.logs||[]),r=await s.repairs.modules.node_modules(),n=n.concat(r?.changed||[]),a=a.concat(r?.logs||[]),{changed:n,logs:a}},repairs:{messages:{main:{fix(){const e=require(__filename);if(!e.repairs.messages.main.test())return;const s=e.repairs.messages.main.fixes;let r,n=[],a=[];return r=s.beginEnd("","}"),n=n.concat(r.changed),a=a.concat(r.logs),r=s.beginEnd("{",""),n=n.concat(r.changed),a=a.concat(r.logs),r=s.beginEnd("{","}"),n=n.concat(r.changed),a=a.concat(r.logs),{changed:n,logs:a}},test(){const e=require("../../../settings.json"),s=require("fs");try{return s.readdirSync(e.generic.path.files.messages).forEach((r=>{JSON.parse(s.readFileSync(`${e.generic.path.files.messages}${r}`))})),!1}catch{return!0}},fixes:{beginEnd(e,s){const r=require("../../../settings.json"),n=require("fs"),a=n.readdirSync(r.generic.path.files.messages),c=[],i=[];return a.forEach((a=>{try{JSON.parse(`${n.readFileSync(`${r.generic.path.files.messages}${a}`)}`)}catch{try{JSON.parse(`${e}${n.readFileSync(`${r.generic.path.files.messages}${a}`)}${s}`),n.writeFileSync(`${r.generic.path.files.messages}${a}`,`${e}${n.readFileSync(`${r.generic.path.files.messages}${a}`)}${s}`),c.push({tag:"changedJson",begin:e,end:s})}catch(e){i.push({tag:"error",value:e})}}})),{changed:c,logs:i}}}}},modules:{async node_modules(){const e=[],s=[];try{const r=require("../../../settings.json"),n=require("fs"),a=[],c=s=>{try{require.resolve(s)}catch{a.push(s),e.push({tag:"installedNodeModule",value:s})}};repairSettings.projectDependencies.forEach((e=>{c(e)}));return n.readdirSync(r.generic.path.files.modules).forEach((e=>{const a=`${r.generic.path.files.modules}${e}/${r.generic.path.files.extraDependencies}`;if(console.log(a),n.existsSync(a))try{const e=require(a);e?.node_modules&&e.node_modules.forEach((e=>{c(e)}))}catch(e){s.push({tag:"error",value:e})}const i=r.generic.path.files.moduleApi.replace("{modules}",r.generic.path.files.modules).replace("{name}",e);if(n.existsSync(i)){n.readdirSync(i).forEach((n=>{try{const s=require(`../../.${r.generic.path.files.moduleApi.replace("{modules}",r.generic.path.files.modules).replace("{name}",e)}${n}`);s.dependencies?.node_modules&&s.dependencies.node_modules.forEach((e=>{c(e)}))}catch(e){s.push({tag:"error",value:e})}}))}})),a&&await require("../installNodeModule").execute(a),{changed:e,logs:s}}catch(s){return{changed:e,logs:[{tag:"error",value:s}]}}}}}};
