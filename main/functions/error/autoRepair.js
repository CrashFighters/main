const repairSettings={jsonBeginEnd:[["","}"],["{",""],["{","}"]],projectDependencies:["mime-types"]};module.exports={async execute(e){let s,r=require(__filename),a=[],n=[];return e.close(),s=await r.repairs.messages.main.fix(),a=a.concat(s?.changed||[]),n=n.concat(s?.logs||[]),s=await r.repairs.modules.node_modules(),a=a.concat(s?.changed||[]),n=n.concat(s?.logs||[]),{changed:a,logs:n}},repairs:{messages:{main:{fix(){let e=require(__filename);if(!e.repairs.messages.main.test())return;let s,r=e.repairs.messages.main.fixes,a=[],n=[];return s=r.beginEnd("","}"),a=a.concat(s.changed),n=n.concat(s.logs),s=r.beginEnd("{",""),a=a.concat(s.changed),n=n.concat(s.logs),s=r.beginEnd("{","}"),a=a.concat(s.changed),n=n.concat(s.logs),{changed:a,logs:n}},test(){const e=require("../../../settings.json"),s=require("fs");try{return s.readdirSync(e.generic.path.files.messages).forEach((r=>{JSON.parse(s.readFileSync(`${e.generic.path.files.messages}${r}`))})),!1}catch{return!0}},fixes:{beginEnd(e,s){const r=require("../../../settings.json"),a=require("fs"),n=a.readdirSync(r.generic.path.files.messages);let c=[],i=[];return n.forEach((n=>{try{JSON.parse(`${a.readFileSync(`${r.generic.path.files.messages}${n}`)}`)}catch{try{JSON.parse(`${e}${a.readFileSync(`${r.generic.path.files.messages}${n}`)}${s}`),a.writeFileSync(`${r.generic.path.files.messages}${n}`,`${e}${a.readFileSync(`${r.generic.path.files.messages}${n}`)}${s}`),c.push({tag:"changedJson",begin:e,end:s})}catch(e){i.push({tag:"error",value:e})}}})),{changed:c,logs:i}}}}},modules:{async node_modules(){let e=[],s=[];try{const r=require("../../../settings.json"),a=require("fs");let n=[],c=s=>{try{require.resolve(s)}catch{n.push(s),e.push({tag:"installedNodeModule",value:s})}};return repairSettings.projectDependencies.forEach((e=>{c(e)})),a.readdirSync(r.generic.path.files.modules).forEach((e=>{let n=`${r.generic.path.files.modules}${e}/${r.generic.path.files.extraDependencies}`;if(console.log(n),a.existsSync(n))try{let e=require(n);e?.node_modules&&e.node_modules.forEach((e=>{c(e)}))}catch(e){s.push({tag:"error",value:e})}let i=r.generic.path.files.moduleApi.replace("{modules}",r.generic.path.files.modules).replace("{name}",e);a.existsSync(i)&&a.readdirSync(i).forEach((a=>{try{let s=require(`../../.${r.generic.path.files.moduleApi.replace("{modules}",r.generic.path.files.modules).replace("{name}",e)}${a}`);s.dependencies?.node_modules&&s.dependencies.node_modules.forEach((e=>{c(e)}))}catch(e){s.push({tag:"error",value:e})}}))})),n&&await require("../installNodeModule").execute(n),{changed:e,logs:s}}catch(s){return{changed:e,logs:[{tag:"error",value:s}]}}}}}};
