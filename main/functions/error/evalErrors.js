const readdir=require("util").promisify(require("fs").readdir),settings=require("../../../settings.json"),messages=require("../get/messages").execute().mainFunction();let cConsole=console;require("../../functions/isModuleInstalled").execute("console")&&(cConsole={clear:require(`../../.${settings.generic.path.files.modules}console/functions/clear`).execute,log:require(`../../.${settings.generic.path.files.modules}console/functions/log`).execute,warn:require(`../../.${settings.generic.path.files.modules}console/functions/warn`).execute}),module.exports={async execute(){cConsole.clear(),cConsole.log(`Listening on port ${settings.generic.port}...`);try{const e=(await readdir(settings.generic.path.files.errors)).filter((e=>e!==settings.generic.path.files.noError));if(e[0]){cConsole.clear(),cConsole.log(`Listening on port ${settings.generic.port}...`),cConsole.log(),cConsole.log();let r=messages.error.thereAreErrors.replace("{amount}",e.length);1===e.length&&(r=messages.error.thereIsError.replace("{amount}",e.length)),cConsole.warn(r),e.forEach((e=>{const r=require(`../../../${settings.generic.path.files.errors}${e}`).occurrences.length;cConsole.warn(`${settings.generic.path.files.errors}${e}\t\t${r}`)})),cConsole.log()}}catch(e){require("./lastFallback").execute(e)}}};
