const api=require("../setup/preload/api.js").execute(),isModuleInstalled=require("../functions/isModuleInstalled.js").execute,parseErrorOnline=require("../functions/error/parseErrorOnline.js").execute,statusCode=(e,t,{text:r,short:s})=>{e.writeHead(t,{"Content-Type":"application/json"}),e.end(JSON.stringify({successful:`${t}`.startsWith("2"),code:t,text:r,short:s}))};module.exports={execute(e,t,{middlewareData:r,extraData:s}){const o=(e,r)=>parseErrorOnline(e,t,r);try{const a=require("../functions/get/messages").execute({request:e}).mainFunction(),{path:n,params:i,success:d}=require("../functions/parse/apiCall.js").execute(e);if(!d)return void statusCode(t,400,{text:"Invalid request",short:"invalidRequest"});if(!api[n])return statusCode(t,404,{text:a.error.apiCallNotFound});if(!api[n].enabled.dependencies.installed)return o(new Error(a.error.moduleNotInstalledForShort.replace("{api}",n)),a.error.moduleNotInstalledFor.replace("{api}",n).replace("{dependency}",api[n].enabled.dependencies.dependenciesNotInstalled.join(", ")));{const d=api[n].file;if(!Boolean(d?.execute))return o(new Error(a.error.executeFunctionNotFoundWithFile.replace("{file}",n)),a.error.executeFunctionNotFound);"GET"===e.method?d.execute({statusCode:(e,r,s)=>{statusCode(t,e,{text:s,short:r})},parseError:o,end:e=>{t.end(e)},request:e,isModuleInstalled:isModuleInstalled,params:i,response:t,middlewareData:r,extraData:s}):statusCode(t,405,{text:"Method not allowed",short:"methodNotAllowed"})}}catch(e){o(e)}}};
