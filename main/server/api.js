const api=require("../setup/preload/api.js").execute(),isModuleInstalled=require("../functions/isModuleInstalled.js").execute,parseErrorOnline=require("../functions/error/parseErrorOnline.js").execute,statusCode=(e,r,{text:t,short:o})=>{e.writeHead(r,{"Content-Type":"application/json"}),e.end(JSON.stringify({error:!0,code:r,text:t,short:o}))};module.exports={execute(e,r,{middleWareData:t,extraData:o}){const n=(e,t)=>parseErrorOnline(e,r,t);try{const a=require("../functions/get/messages").execute({request:e}).mainFunction(),{path:s,params:i}=require("../functions/parse/apiCall.js").execute(e.url);if(!api[s])return statusCode(r,404,{text:a.error.apiCallNotFound});if(!api[s].enabled.dependencies.installed)return n(new Error(a.error.moduleNotInstalledForShort.replace("{api}",s)),a.error.moduleNotInstalledFor.replace("{api}",s).replace("{dependency}",api[s].enabled.dependencies.dependenciesNotInstalled.join(", ")));{const d=api[s].file;if(!Boolean(d?.execute))return n(new Error(a.error.executeFunctionNotFoundWithFile.replace("{file}",s)),a.error.executeFunctionNotFound);if("GET"!==e.method)throw new Error(`Method ${e.method} not implemented`);d.execute({statusCode:(e,t,o)=>{statusCode(r,e,{text:o,short:t})},parseError:n,end:e=>{r.end(e)},request:e,isModuleInstalled:isModuleInstalled,params:i,response:r,middleWareData:t,extraData:o})}}catch(e){n(e)}}};
