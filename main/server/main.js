const fs=require("fs"),path=require("path"),middlewares=fs.existsSync(path.resolve(__dirname,"./middleware/"))?fs.readdirSync(path.resolve(__dirname,"./middleware/")).map((e=>require(`./middleware/${e}`))):null,settings=require("../../settings.json"),parseErrorOnline=require("../functions/error/parseErrorOnline").execute,parsePostBody=require("../functions/parse/postBody");function waitPost(e){return new Promise((r=>{let t="";e.on("data",(r=>{t+=r,t.length>1e6&&e.connection.destroy()})),e.on("end",(()=>{r(t)}))}))}module.exports={async execute(e,r){const t=(e,t)=>parseErrorOnline(e,r,t);try{let a;"POST"===e.method&&(a=parsePostBody(await waitPost(e)));const s={body:a};let n={};if(middlewares)for(const a of middlewares){const i=await a({request:e,response:r,extraData:s,parseError:t})??{};n={...n,...i}}return e.url.toLowerCase().startsWith(settings.generic.path.online.api)?require("../server/api.js").execute(e,r,{middlewareData:n,extraData:s}):require("./normal.js").execute(e,r,{middlewareData:n,extraData:s})}catch(e){t(e)}}};
