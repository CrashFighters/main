const fs=require("fs"),path=require("path"),middlewares=fs.existsSync(path.resolve(__dirname,"./middleware/"))?fs.readdirSync(path.resolve(__dirname,"./middleware/")).map((e=>({...require(`./middleware/${e}`),name:e.split(".")[0]}))):[],parseErrorOnline=require("../functions/error/parseErrorOnline").execute,parsePostBody=require("../functions/parse/postBody");function waitPost(e){return new Promise((r=>{let t="";e.on("data",(r=>{t+=r,t.length>1e6&&e.connection.destroy()})),e.on("end",(()=>{r(t)}))}))}module.exports={async execute(e,r){const t=(e,t)=>parseErrorOnline(e,r,t);try{let a;"POST"===e.method&&(a=parsePostBody(await waitPost(e)));const s={body:a};let i={};const n=[];for(;middlewares.length>n.length;)for(const{execute:a,info:o,name:d}of middlewares){if(n.includes(d))continue;if(o?.requires&&o.requires.some((e=>!n.includes(e))))continue;const u=await a({request:e,response:r,extraData:s,parseError:t,middlewareData:i})??{};i={...i,...u},n.push(d)}return e.url.startsWith("/dbApi/")?require("./dbApi.js").execute(e,r,{middlewareData:i,extraData:s}):e.url.startsWith("/api/")?require("./api.js").execute(e,r,{middlewareData:i,extraData:s}):require("./normal.js").execute(e,r,{middlewareData:i,extraData:s})}catch(e){t(e)}}};
